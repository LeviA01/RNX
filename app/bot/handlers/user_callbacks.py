from aiogram import Router, F
from aiogram.types import CallbackQuery, FSInputFile
from app.services.subscription import SubscriptionService
from app.bot.keyboards.user_keyboard import get_start_keyboard, get_configuration_keyboard, get_admin_keyboard
from app.database.repositories.server_repo import ServerRepository
from app.database.connection import get_db
from app.core.config import settings

router = Router()

@router.callback_query(F.data == "start_callback")
async def start_button(callback: CallbackQuery):


    service = SubscriptionService()
    status = await service.get_subscription_status(callback.from_user.id)
    user = await service.get_user_by_telegram_id(callback.from_user.id)

    if callback.from_user.id in settings.ADMIN_IDS:
        text, keyboard = get_admin_keyboard(status,user)
    else:
        text, keyboard = get_start_keyboard(status,user)

    await callback.answer()
    await callback.message.answer_photo(
        photo=FSInputFile("app/images/TG_message_LC.png"),
        caption=text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

    

@router.callback_query(F.data == "extend_subscription")
async def extend_subscription_pay(callback: CallbackQuery):
    try:
        service = SubscriptionService()
        user = await service.get_user_by_telegram_id(callback.from_user.id)

        if not user:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start.")
            return

        payment_url = "https://example.com/payment_link"
        await callback.answer()
        await callback.message.answer(
            f"<b>–î–ª—è –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π:</b>\n\n<a href='{payment_url}'>{payment_url}</a>\n\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –º—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!", 
            parse_mode="HTML"
        )
        text = await service.extend_subscription(callback.from_user.id, 1)
        keyboard = get_configuration_keyboard()
        await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    
    except Exception as e:
        print(f"Error in extend_subscription_pay: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )

@router.callback_query(F.data == "pay_subscription")
async def pay_subscription(callback: CallbackQuery):
    try:
        service = SubscriptionService()
        user = await service.get_user_by_telegram_id(callback.from_user.id)

        if not user:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Å–ª–æ–π
        server = await service.check_free_server()
        if not server:
            await callback.answer()
            await callback.message.edit_text(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ üòî\n\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="HTML"
            )
            return

        payment_url = "https://example.com/payment_link"
        await callback.answer()
        await callback.message.edit_text(
            f"<b>–î–ª—è –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π:</b>\n\n<a href='{payment_url}'>{payment_url}</a>\n\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –º—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!", 
            parse_mode="HTML"
        )
        text = await service.pay_subscription(callback.from_user.id, 1)
        keyboard = get_configuration_keyboard()
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    

    except Exception as e:
        print(f"Error in pay_subscription: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )

@router.callback_query(F.data == "get_configuration")
async def get_configuration(callback: CallbackQuery):
    service = SubscriptionService()
    user = await service.get_user_by_telegram_id(callback.from_user.id)
    if not user:
        await callback.message.edit_text(
            "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏!\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.",
            reply_markup=get_configuration_keyboard(),
            parse_mode="HTML"
        )
        return
    text = await service.get_configuration(callback.from_user.id)
    keyboard = get_configuration_keyboard()
    await callback.message.edit_caption(
        caption=text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()
    

def get_start_message(user, subscription_end=None, balance=0):
    status = "–ê–∫—Ç–∏–≤–Ω–∞ üü¢" if user.status == "active" else "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞ üî¥"
    sub_end = subscription_end.strftime("%d.%m.%Y") if subscription_end else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
    
    return (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.username}! üöÄ\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç! –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ—ë–º –∞–∫–∫–∞—É–Ω—Ç–µ, –ø–æ–¥–ø–∏—Å–∫–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞.\n\n"
        f"üìå –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞:\n"
        f"üîπ –í–∞—à —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {status}\n"
        f"üîπ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {sub_end} üìÖ\n\n"
        f"ü™ô –ë–∞–ª–∞–Ω—Å: {balance} —Ä—É–±–ª–µ–π\n\n"
        f"üîë –î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å—É:\n"
        f"–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n\n"
        f"‚û°Ô∏è [–í–∞—à–∞ —Å—Å—ã–ª–∫–∞]\n\n"
        f"üëÜ –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å, –∏–ª–∏ –∑–∞–≥–ª—è–Ω–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª üìñ ¬´–ü–æ–º–æ—â—å –≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏¬ª ‚Äî —Ç–∞–º –µ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ.\n\n"
        f"‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
        f"–í—Å–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö –≤—ã –Ω–∞–π–¥—ë—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ üìñ ¬´–ü–æ–º–æ—â—å –≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏¬ª."
    )
    
